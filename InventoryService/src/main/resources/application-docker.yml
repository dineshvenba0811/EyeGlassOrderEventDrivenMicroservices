spring:
  application:
    name: orderservice

  datasource:
    url: jdbc:postgresql://postgres:5432/order_service
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}

  jpa:
    hibernate:
      ddl-auto: validate         # ← don’t use `create` with Flyway; let Flyway own schema

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP:kafka:9092}
    template:
      default-topic: order-placed
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://schema-registry:8085}
    consumer:
      group-id: order-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.banyan.smartDocuments.EyeGlassOrderService.dto.OrderStatusUpdatedEvent
      listener:
        missing-topics-fatal: false

server:
  port: 8088

jwt:
  secret: ${JWT_SECRET:change-me-32+chars-random}
  expiration-ms: 3600000

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URL:http://discovery-server:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true