version: '4'
services:
  postgres-order:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_service
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_order_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-inventory:
    image: postgres:latest
    container_name: postgresInventory
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory_service
    ports:
      - "5433:5432"
    volumes:
      - ./postgres_inventory_data:/var/lib/postgresql/data

  postgres-auth:
    image: postgres:latest
    container_name: postgresAuth
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_service
    ports:
      - "5434:5432"
    volumes:
      - ./postgres_auth_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  discovery-server:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    image: discovery-server:latest
    container_name: discovery-server
    ports: [ "8761:8761" ]

  authenticationservice:
    build:
      context: ./AuthenticationService
    image: authenticationservice:latest
    container_name: authenticationservice
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgresAuth          # matches your container_name above
      DB_PORT: 5432
      DB_NAME: auth_service
      DB_USER: postgres
      DB_PASSWORD: postgres
      EUREKA_URL: http://discovery-server:8761/eureka
      JWT_SECRET: change-me-32+chars-random
    depends_on:
      postgres-auth:
        condition: service_started
      discovery-server:
        condition: service_started
    ports: [ "8087:8087" ]

  orderservice:
    build:
      context: ./EyeGlassOrderService
    image: orderservice:latest
    container_name: orderservice
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      EUREKA_URL: http://discovery-server:8761/eureka
      KAFKA_BOOTSTRAP: broker:29092                     # << use internal listener
      SCHEMA_REGISTRY_URL: http://schema-registry:8081  # << internal port
      JWT_SECRET: change-me-32+chars-random
    depends_on:
      postgres-order:
        condition: service_started
      discovery-server:
        condition: service_started
      broker:
        condition: service_started
      schema-registry:
        condition: service_started
    ports: [ "8088:8088" ]

  gateway-service:
    build:
      context: ./api-gateway
    image: gateway-service:latest
    container_name: gateway-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URL: http://discovery-server:8761/eureka
    depends_on:
      discovery-server:
        condition: service_started
      authenticationservice:
        condition: service_started
      orderservice:
        condition: service_started
    ports: [ "8080:8080" ]

  inventoryservice:
    build: ./Inventoryservice
    container_name: inventoryservice
    ports:
      - "8090:8090"
    depends_on:
      - discovery-server
      - postgres-inventory
      - broker
      - schema-registry
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URL: http://discovery-server:8761/eureka
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_BOOTSTRAP: broker:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      JWT_SECRET: change-me-32+chars-random